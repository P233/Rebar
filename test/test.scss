@import "true";
@import "../rebar.scss";

@include test-module("Function Helpers Test") {
  @include test("_rebar-percentage") {
    $test: _rebar-percentage(1/2);
    $expect: 50%;
    @include assert-equal($test, $expect, "Convert fraction to percent value.");

    $test: _rebar-percentage(1);
    $expect: 100%;
    @include assert-equal($test, $expect, "Convert unitless number to percent value.");

    $test: _rebar-percentage(20px);
    $expect: 20px;
    @include assert-equal($test, $expect, "Don't convert number has unit.");

    $test: _rebar-percentage(null);
    $expect: null;
    @include assert-equal($test, $expect, "Don't convert other values.");
  }


  @include test("_rebar-get-value-from-list") {
    $list: 1/2 null 100%;

    $test: _rebar-get-value-from-list($list, 1);
    $expect: 1/2;
    @include assert-equal($test, $expect, "Slice is less than $list length.");

    $test: _rebar-get-value-from-list($list, 4);
    $expect: null;
    @include assert-equal($test, $expect, "Slice is larger than $list length.");
  }


  @include test("_rebar-get-value-from-map") {
    $map: (
      width: 1/2 null 100%
    );

    $test: _rebar-get-value-from-map($map, width, 1);
    $expect: 1/2;
    @include assert-equal($test, $expect, "Slice is less than queried list length.");

    $test: _rebar-get-value-from-map($map, width, 4);
    $expect: null;
    @include assert-equal($test, $expect, "Slice is larger than queried length.");
  }


  @include test("_rebar-get-media-feature") {
    $rebar-mobile-first: true !global;

    $test: _rebar-get-media-feature(2);
    $expect: min-width;
    @include assert-equal($test, $expect);

    $test: _rebar-get-media-feature(-2);
    $expect: max-width;
    @include assert-equal($test, $expect);

    $rebar-mobile-first: false !global;

    $test: _rebar-get-media-feature(2);
    $expect: max-width;
    @include assert-equal($test, $expect);

    $test: _rebar-get-media-feature(-2);
    $expect: min-width;
    @include assert-equal($test, $expect);
  }


  @include test("_rebar-get-breakpoint") {
    $rebar-breakpoints: 1000px 500px 250px !global;

    $rebar-mobile-first: true !global;

    $test: _rebar-get-breakpoint(2);
    $expect: 500px;
    @include assert-equal($test, $expect);

    $test: _rebar-get-breakpoint(-2);
    $expect: 499px;
    @include assert-equal($test, $expect);

    $rebar-mobile-first: false !global;

    $test: _rebar-get-breakpoint(2);
    $expect: 500px;
    @include assert-equal($test, $expect);

    $test: _rebar-get-breakpoint(-2);
    $expect: 501px;
    @include assert-equal($test, $expect);
  }


  @include test("_rebar-parse-settings") {
    $grids: (
      ".grid-a": (
        width: 1/2 null 100%,
        float: left null "right" none,
        container: true
      ),
      ".grid-b": (
        width: 200px 50% fit-content,
        float: none null right left,
        container: false
      )
    );
    $keys: width float container;

    $test: _rebar-parse-settings($grids, $keys, 1);
    $expect: ".grid-a" 50% left true, ".grid-b" 200px none false;
    @include assert-equal($test, $expect);

    $test: _rebar-parse-settings($grids, $keys, 3);
    $expect: ".grid-a" 100% "right" null, ".grid-b" fit-content right null;
    @include assert-equal($test, $expect);

    $test: _rebar-parse-settings($grids, $keys, 4);
    $expect: ".grid-a" null none null, ".grid-b" null left null;
    @include assert-equal($test, $expect);
  }
}


@include test-module("Mixin Helpers Test") {
  @include test("_rebar-clearfix") {
    @include assert("Output clearfix styles for a selectors list.") {
      @include output {
        $selectors: ".container-a", ".container-b";
        @include _rebar-clearfix($selectors);
      }
      @include expect {
        .container-a::after,
        .container-b::after {
          display: table;
          clear: both;
          content: "";
        }
      }
    }
  }
}


@include test-module("Rebar Mixins Test") {
  @include test("retina") {
    @include assert("Output media query for retina screen") {
      @include output {
        @include retina {
          body { background-image: url(""); }
        };
      }
      @include expect {
        @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
          body { background-image: url(""); }
        }
      }
    }
  }

  @include test("slicer") {
    $rebar-mobile-first: true !global;
    $rebar-breakpoints: 481px 769px 993px !global;

    @include assert("Output media query for positive slice") {
      @include output {
        @include slicer(2) {
          body { margin: 0; }
        };
      }
      @include expect {
        @media screen and (min-width: 769px) {
          body { margin: 0; }
        }
      }
    }

    @include assert("Output media query for nagitave slice") {
      @include output {
        @include slicer(-3) {
          body { margin: 0; }
        };
      }
      @include expect {
        @media screen and (max-width: 992px) {
          body { margin: 0; }
        }
      }
    }

    @include assert("Output media query for two slices") {
      @include output {
        @include slicer(2, -3) {
          body { margin: 0; }
        };
      }
      @include expect {
        @media screen and (min-width: 769px) and (max-width: 992px) {
          body { margin: 0; }
        }
      }
    }
  }

  @include test("properties") {
    $rebar-mobile-first: false !global;
    $rebar-breakpoints: 992px 768px 480px !global;

    @include assert("Output properties for all slices") {
      @include output {
        $properties: (
          "font-size": 18px 16px 14px,
          "line-height": 1.5 1.3 1.2 1
        );

        body {
          @include properties($properties);
        }
      }
      @include expect {
        body {
          font-size: 18px;
          line-height: 1.5;
        }
        @media screen and (max-width: 992px) {
          body {
            font-size: 16px;
            line-height: 1.3;
          }
        }
        @media screen and (max-width: 768px) {
          body {
            font-size: 14px;
            line-height: 1.2;
          }
        }
        @media screen and (max-width: 480px) {
          body {
            line-height: 1;
          }
        }
      }
    }
  }
}
